The general structure of for loop syntax in C

for (initial value; condition; incrementation or decrementation) {
	statements;
}

//the initial value of the for loop is performed only once
//the condition is a boolean expression that tests and compares the counter to a fixed value  after each iteration, stopping the for loop when false is returned.
//https://www.guru99.com/c-loop-statement.html#:~:text=In%20an%20entry%20control%20loop,as%20a%20post%2Dchecking%20loop.

---example
#include <stdio.h>

int main () {
	int i;
	for (i = 1; i<=10; i++) {
	printf("%d",i);
	}

	return 0;
}
---example //we can use multiple expressions separated by commas
#include <stdio.h>
#include <stdlib.h>

int main () {
	int x,y;
	for (x=0,y=5; x<y; x=x+1,y=y-2) { 		 //we can use multiple expressions separated by commas
		printf("%d,%d\n",x,y);
	}
	return 0;
}
---example //we can also skip the initial value expression
#include <stdio.h>
#include <stdlib.h>

int main () {
	int a = 5;
	for (;a<10;a++) {		//we can skip the initial value expression by adding a semicolon
		printf("%d",a);
		
	}
	return 0;
}
---

#include <stdio.h>
#include <stdlib.h>

int main () {
	int i = 1;
	while (i <=5) {
		printf("%d\n",i);
		i++;
	}
	return 0;
}

---

#include <stdio.h>
#incldue <stdlib.h>
int main () {
	int i;
	for (i = 1; i <= 5; i++) {
		printf("%d\n",i);
}
return 0;	
}


---
//basic form
#include <stdio.h>
#include <stdlib.h>

int main () {
	int luckyNumbers[] = {4,2,31,23,222};
	int i;
	for (i=0; i<5 ;i++) {
		printf("%d\n",luckyNumbers[i]);
		
	} 
	return 0;
}

//anything you can make with for loops can be made with while loops
